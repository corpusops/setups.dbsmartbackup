---
corpusops_core_projects_path: /srv/projects
cops_dbsmartbackup_backups_prefix: /srv/backups
cops_dbsmartbackup_conf: []
# users than have full right to edit file in the container
# When this is enabled, the project user/group is also granted full perms
# (attention, uids!)
# users than have full right to edit file in the container
# When this is enabled, the project user/group is also granted full perms
# (attention, uids!)
cops_dbsmartbackup__supereditors_paths:
  - "{{vars['cops_dbsmartbackup_project_root']}}"
  - "{{vars['cops_dbsmartbackup_data_root']}}"
# space separated string of uids to allow to write inside
# projetct directories (used in development through posix ACLS setter)
cops_dbsmartbackup__supereditors: >-
  {{ ansible_env.get(
      'SUPEREDITORS', cops_supereditors|default('')
     ) | copsf_splitstrip | to_json }}
cops_dbsmartbackup_supereditors_paths: "{{vars['cops_dbsmartbackup__supereditors_paths']}}"
cops_dbsmartbackup_supereditors: "{{vars['cops_dbsmartbackup__supereditors']}}"
cops_dbsmartbackup_deb_packages: [jq]
cops_dbsmartbackup_rh_packages: [jq]
# extra conf to add to pgconf (directly added to a tuning conf file (string))
cops_dbsmartbackup_sysctls: []
#- kernel.shmmax: 1106127360
## 1024 * shmmax / 4096
#- kernel.shmall: 276531840
cops_dbsmartbackup_domain: "{{ansible_fqdn}}"
# for internal monitoring
cops_dbsmartbackup_name: 'dbsmartbackup'
cops_dbsmartbackup_user: "{{vars['cops_dbsmartbackup_name']}}-user"
cops_dbsmartbackup_group: "{{vars['cops_dbsmartbackup_name']}}-group"
cops_dbsmartbackup_projects_dir: "{{corpusops_vars.projects_path}}"
cops_dbsmartbackup_project_sdir: "{{vars['cops_dbsmartbackup_name']}}"
cops_dbsmartbackup_project_dir: "{{vars['cops_dbsmartbackup_projects_dir']}}/{{vars['cops_dbsmartbackup_project_sdir']}}"
cops_dbsmartbackup_project_root: "{{vars['cops_dbsmartbackup_project_dir']}}/project"
cops_dbsmartbackup_data_root: "{{vars['cops_dbsmartbackup_project_dir']}}/data"
cops_dbsmartbackup_cfg: "{{vars['cops_dbsmartbackup_data_root']}}/config"
cops_dbsmartbackup_fixperms: "{{vars['cops_dbsmartbackup_project_dir']}}/fixperms.sh"
cops_dbsmartbackup_fixperms_cron_periodicity: "0 */2 * * *"
#cops_dbsmartbackup_fixperms_cron_periodicity: ""
cops_dbsmartbackup_fixperms_cron: "/etc/cron.d/{{vars['cops_dbsmartbackup_name']}}-fixperms"
# overrides this dir with values of cops_dbsmartbackup_env !
cops_dbsmartbackup_env_overrides: {}
cops_dbsmartbackup_env: {}
#  PGPASSWORD: foobar
cops_dbsmartbackup_secret_variables: []
cops_dbsmartbackup_cops_format_resolve_topdb: false
cops_dbsmartbackup_cops_do_format_resolve: false
cops_dbsmartbackup_cops_sub_namespaces:
  s: {}
  lifecycle: {}
  force: {}
  default_conf: {}
  confs: {}
cops_dbsmartbackup_dbsmartbackup_bind_host: '127.0.0.1'
# templates
## entry point
cops_dbsmartbackup_provision_dir: /provision_dir
cops_dbsmartbackup_ep_template: "../templates/app_entry_point"
cops_dbsmartbackup_ep_playbook: ".ansible/playbooks/site.yml"
cops_dbsmartbackup_ep_main_ep: "/entry_point"
# Docker entrypoint settings, tags for cli and vars for playbook reuse via
# conditionals
# global orchestration steps (db, code sync, web & workers prereqs, dbsmartbackup config)
cops_dbsmartbackup_become: true
# dbsmartbackup & project deployment steps
# service
cops_dbsmartbackup_service: "cron"
cops_dbsmartbackup_services: ["{{vars['cops_dbsmartbackup_service']}}"]
cops_dbsmartbackup_rhandlers: [restart_cops_dbsmartbackup]
## use in docker (via a vault):
cops_dbsmartbackup_reconfigure_services: |-
  {% set ret = [] %}
  {% if ansible_virtualization_type in ['docker'] %}
  {% set _ = ret.append("post-start-{{vars['cops_dbsmartbackup_service']}}") %}
  {% endif %}
  {{ ret | to_json }}
cops_dbsmartbackup_activated: true
# Layout, files & configs
cops_dbsmartbackup_stickymode: "2"
cops_dbsmartbackup_files:
  - {path: "{{vars['cops_dbsmartbackup_backups_prefix']}}",
     owner: root, group: root, state: directory}
  - {path: "{{vars['cops_dbsmartbackup_projects_dir']}}",
     owner: root, group: root, state: directory}
  - {path: "{{vars['cops_dbsmartbackup_project_dir']}}",
     owner: root, group: root, state: directory}
  - {path: "{{vars['cops_dbsmartbackup_project_root']}}",
     owner: "{{vars['cops_dbsmartbackup_user']}}", group: "{{vars['cops_dbsmartbackup_group']}}",
     state: directory, mode: "{{vars['cops_dbsmartbackup_stickymode']}}755"}
  - {path: "{{vars['cops_dbsmartbackup_data_root']}}",
     owner: "{{vars['cops_dbsmartbackup_user']}}", group: "{{vars['cops_dbsmartbackup_group']}}",
     state: directory, mode: "{{vars['cops_dbsmartbackup_stickymode']}}755"}
  - {path: "{{vars['cops_dbsmartbackup_cfg']}}",
     owner: "{{vars['cops_dbsmartbackup_user']}}", group: "{{vars['cops_dbsmartbackup_group']}}",
     state: directory, mode: "{{vars['cops_dbsmartbackup_stickymode']}}755"}
# Config files
cops_dbsmartbackup_configs: []
cops_dbsmartbackup_fixperms_configs:
  - {src: "../templates/fixperms.sh",
     dest: "{{vars['cops_dbsmartbackup_fixperms']}}", mode: "0755",
     owner: root, group: root}
cops_dbsmartbackup_ep_configs:
  # script to reconfigure image before and after systemd is launched
  - {src: "../templates/reconfigure.sh",
     dest: "{{vars['cops_dbsmartbackup_reconfigure']}}",
     mode: "0755",
     owner: "root",
     group: "root"}
  - {src: "../templates/post-start-reconfigure.service",
     dest: "/etc/systemd/system/post-start-{{vars['cops_dbsmartbackup_service']}}.service",
     mode: "0644",
     owner: "root",
     group: "root"}
  - {src: "{{vars['cops_dbsmartbackup_ep_template']}}",
     dest: "/app_entry_point", mode: "0755",
     owner: root, group: root}
# SystemD based reconfigure unit settings
cops_dbsmartbackup_reconfigure_service_stderr: "journal{% if ansible_virtualization_type in ['docker']%}+console{%endif%}"
cops_dbsmartbackup_reconfigure_service_stdout: "journal{% if ansible_virtualization_type in ['docker']%}+console{%endif%}"
cops_dbsmartbackup_reconfigure_unit_after: "network.target cron.service"
cops_dbsmartbackup_reconfigure_install_wantedby: "multi-user.target"
cops_dbsmartbackup_reconfigure: "{{vars['cops_dbsmartbackup_provision_dir']}}/reconfigure.sh"
cops_dbsmartbackup_reconfigure_passenv: >
  COPS_ROOT NO_SILENT NO_OUTPUT NONINTERACTIVE
  ANSIBLE_CWD ANSIBLE_PLAY ANSIBLE_VARARGS ANSIBLE_ARGS
  A_VAULTS_FOLDERS A_VAULTS A_EXTRA_VAULTS
  A_INVENTORY A_ENV_NAME NO_DEFAULT_VAULTS
# Code synchronnisation settings
cops_dbsmartbackup_push_codes_cwd: "{{vars['cops_cwd']}}"
cops_dbsmartbackup_push_codes_sync_mode: "{{ (
  cops_installer_mode in ['vagrant'] or
  ansible_virtualization_type in ['docker']
  ) and 'rsync' or 'git' }}"
cops_dbsmartbackup_push_codes_file_tests:
  git: []
  rsync: [".git"]
cops_dbsmartbackup_push_codes_rsync_opts:
  git:   ["-azv",                           "--exclude", "local/*", "--exclude", ".vagrant", "--exclude", "*.retry"]
  rsync: ["-azv", "--include", ".git/**/*", "--exclude", "local/*", "--exclude", ".vagrant", "--exclude", "*.retry"]
cops_dbsmartbackup_push_codes_rsync_submodule_opts:
  git:   ["-azv", "--exclude", "*.retry"]
  rsync: ["-azv", "--exclude", "*.retry"]
cops_dbsmartbackup_push_codes:
- path: "{{vars['cops_dbsmartbackup_project_root']}}"
  origin_path: "{{vars['cops_dbsmartbackup_push_codes_cwd']}}"
  sync_mode: "{{cops_dbsmartbackup_push_codes_sync_mode}}"
  rsync_opts: "{{cops_dbsmartbackup_push_codes_rsync_opts[cops_dbsmartbackup_push_codes_sync_mode]}}"
  file_tests: "{{cops_dbsmartbackup_push_codes_file_tests[cops_dbsmartbackup_push_codes_sync_mode]}}"
  owner: "{{vars['cops_dbsmartbackup_user']}}"
  group: "{{vars['cops_dbsmartbackup_group']}}"
# SSH deploy settings -> env vault
cops_deploy_ssh_key_paths:
  deploy:
    path: "{{'local/.ssh/deploy_key'|copsf_abspath}}"
    pub: "{{cops_deploy_ssh_pub_key|default('')}}"
    #  ssh-rsa xxx x@y
    # should be in encypted vault
    private: "{{cops_deploy_ssh_key|default('')}}"
    # -----BEGIN RSA PRIVATE KEY-----
    # -----END RSA PRIVATE KEY-----
# backup settings for database
cops_dbsmartbackup_confs: {}
# backup default settings for database
cops_dbsmartbackup_default_conf: {}
cops_dbsmartbackup_default_conf_name: null
cops_dbsmartbackup_default_conf_type: null
cops_dbsmartbackup_default_conf_free_form: |
  # This is a comment
  # settings for cron !
cops_dbsmartbackup_default_conf_global_backup: ""
cops_dbsmartbackup_default_conf_cron_mailto: ""
cops_dbsmartbackup_default_conf_servername: "{{ansible_fqdn}}"
cops_dbsmartbackup_default_conf_backup_path_prefix: "{{vars['cops_dbsmartbackup_backups_prefix']}}"
cops_dbsmartbackup_default_conf_keep_lasts: 3
cops_dbsmartbackup_default_conf_keep_days: 3
cops_dbsmartbackup_default_conf_keep_weeks: 0
cops_dbsmartbackup_default_conf_keep_monthes: 0
cops_dbsmartbackup_default_conf_keep_logs: 7
cops_dbsmartbackup_default_conf__periodicity: "0 3 * * *"
cops_dbsmartbackup_default_conf__cron_user: "root"
cops_dbsmartbackup_default_conf_cron: |
  {_periodicity} {_cron_user} {{corpusops_vars.apps_path}}/dbsmartbackup/run_dbsmartbackup.sh {conf_path} --quiet --no-colors
cops_dbsmartbackup_default_conf_top_backupdir: null
#
# - /etc/dbsmartbackup/myfilea.conf:
    # Without cron val: generate the config without the cron
#    cron: null
# - /etc/dbsmartbackup/myfilen.conf:
#   Without cron val: generate the config without the cron
#     cron: null
# vim:set ft=sls:
